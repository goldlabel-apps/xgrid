"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),require("react"),require("@material-ui/core/Avatar");var e=require("./_tslib-f47787e4.js");require("@material-ui/core/styles"),require("@material-ui/icons/Done"),require("@material-ui/icons/Clear"),require("@material-ui/core/Tooltip"),require("@material-ui/icons/Info"),require("clsx"),require("@material-ui/lab"),require("@material-ui/icons/ReportProblem"),require("@material-ui/icons/Autorenew"),require("@material-ui/core/Chip"),require("chance"),require("@material-ui/core/colors");var t=require("fs"),r=require("commander");exports.datagenCli=function(i){r.option("-d, --dataset <dataset>",'A dataset can be "commodity" | "employee"',"employee").option("-s, --size <size>","The number of rows to generate","100").option("-o, --output <output>",'The output file, if not passed, it will generate "./<dataset>-<size>.json"').option("-p, --pretty","print a prettier output",!1).action((()=>{var i,o;console.log(`Generating new ${r.dataset} dataset with ${Number(r.size).toLocaleString()} rows`),(i=Number(r.size),o=r.dataset,e.__awaiter(void 0,void 0,void 0,(function*(){return(yield e.getRealData(Number(i),"commodity"===o.toLowerCase()?e.getCommodityColumns():e.getEmployeeColumns())).rows}))).then((e=>{const i=r.output?r.output:`./${r.dataset}-${r.size}.json`;console.log("Saving generated dataset in "+i),t.writeFileSync(i,JSON.stringify(e,null,r.pretty?2:void 0))}))})).parse(i)};
